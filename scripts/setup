#!/usr/bin/env sh

# scripts/setup: Set up application for the first time after cloning, or set it
#                back to the initial first unused state.
. ./scripts/utils.sh

REPO_ROOT=$(get_repo_root); IS_REPO=$?
if [ "$IS_REPO" -ne 0 ]; then
    echo "ERROR: The current directory does not seem to be within a git repo. Check your working directory and try again."
    exit 1
fi
cd "$REPO_ROOT" || { echo "ERROR: Failed to navigate to \`$REPO_ROOT\`'."; exit 1; }

load_env || { echo "ERROR: Could not find .env file. Have you set up an environment with ./scripts/env?)" >&2; exit 1; }

./scripts/bootstrap

./scripts/db reset
./scripts/db migrate

if [ "$PROJECT_ENV" = 'dev' ]; then
    docker_service_is_running db; db_was_running=$?
    if [ $db_was_running -eq 1 ]; then
        echo "==> starting the \`db\` service container..."
        docker compose -f "$PROJECT_COMPOSE_FILE" up -d db > /dev/null
        wait_for_postgres
    fi
    echo "==> Populating db with test data..."
    exec_psql < ./database/test_data/dev_dataset.sql > /dev/null
    if [ $db_was_running -eq 1 ]; then
        echo "==> stopping \`db\` service container..."
        docker compose -f "$PROJECT_COMPOSE_FILE" stop db > /dev/null 2>&1
    fi
fi

if [ -d "./build" ]; then
    # clean up webpack artifacts, if they exist
    echo '==> cleaning up webpack build artifacts...'
    rm -rf "./build"
fi

if [ "$PROJECT_ENV" = "prod" ]; then
    # build webpack artifacts
    echo '==> Running webpack build...'
    npm run build
fi

exit 0
